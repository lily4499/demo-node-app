pipeline {
    agent any

    environment {
        DO_TOKEN = credentials('digitalocean-credentials-id')  // Jenkins credential ID for DigitalOcean token
        DO_URI_REGISTRY = "registry.digitalocean.com/$DO_REGISTRY_NAME"
        DO_REGISTRY_NAME = "dolilregistry"
        IMAGE_NAME = "devops-app"
        IMAGE_TAG = "${BUILD_NUMBER}"  // Tag image with build number
        IMAGE_URL = "${DO_URI_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        GIT_REPO = 'https://github.com/lily4499/demo-node-app.git'  // Replace with your repository URL
        GIT_BRANCH = 'main'  // Replace with your branch name if different
        NAMESPACE = 'default'  // Kubernetes namespace for deployment
        CLUSTER_NAME = 'do-k8s-cluster'  // DigitalOcean Kubernetes cluster name
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Check out the code from GitHub
                git branch: "${env.GIT_BRANCH}",
                    url: "${env.GIT_REPO}",
                    credentialsId: 'github-token'  // Replace with your Jenkins GitHub credentials ID
            }
        }

        stage('Login to DigitalOcean Registry') {
            steps {
                script {
                    // Authenticate to DigitalOcean Container Registry using the DigitalOcean token
                    sh """
                    echo $DO_TOKEN | docker login -u doctl --password-stdin $DO_URI_REGISTRY
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .'
            }
        }

        stage('Push Docker Image to DigitalOcean Registry') {
            steps {
                sh 'docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_URL}'
                sh 'docker push ${IMAGE_URL}'
            }
        }

        stage('Update Deployment File and Commit to GitHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                    script {
                        // Update the deployment.yaml file with the new image tag
                        sh '''#!/bin/bash
                        sed -i 's|image: .*|image: ${IMAGE_URL}|' doeks/deployment.yaml
                        '''
                        
                        // Commit and push the updated file back to GitHub
                        sh '''#!/bin/bash
                        git config user.name "${GIT_USERNAME}"
                        git config user.email "${GIT_USER_EMAIL}"
                        git add deployment.yaml
                        git commit -m "Update image tag to ${IMAGE_TAG}"
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/lily4499/demo-node-app.git ${GIT_BRANCH}
                        '''
                    }
                }
            }
        }

        stage('Deploy to DigitalOcean Kubernetes') {
            steps {
                script {
                    // Authenticate with the Kubernetes cluster
                    // Use the Secret File as kubeconfig
                    withCredentials([file(credentialsId: 'digitalocean-kubeconfig', variable: 'KUBECONFIG')]) {
                        sh 'kubectl apply -f doeks/deployment.yaml -n ${NAMESPACE}'
                        sh 'kubectl set image deployment/${DEPLOYMENT_NAME} ${DEPLOYMENT_NAME}=${IMAGE_URL} -n ${NAMESPACE} --record'
                        sh 'kubectl rollout status deployment/${DEPLOYMENT_NAME} -n ${NAMESPACE}'
                    }
                }
            }
        }

        stage('Get Application URL') {
            steps {
                script {
                    // Fetch the application URL from the DigitalOcean LoadBalancer service
                    def serviceUrl = sh(script: 'kubectl get svc ${SERVICE_NAME} -n ${NAMESPACE} -o jsonpath="{.status.loadBalancer.ingress[0].ip}"', returnStdout: true).trim()
                    echo "Application is accessible at: http://${serviceUrl}"
                }
            }
        }
    }

    post {
        always {
            script {
                // Clean up Docker images from the local environment
                sh 'docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true'
                sh 'docker rmi ${IMAGE_URL} || true'
            }
        }
    }
}
